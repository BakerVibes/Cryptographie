### César
# Explication des Fonctions de Cryptage et Décryptage

1. Fonction de Cryptage (`cryptage`)

- La fonction prend deux paramètres en entrée : chaine (la chaîne de caractères à crypter) et decalage (le nombre de positions à décaler chaque lettre).
  
- Elle itère sur chaque caractère de la chaîne fournie.

- La condition if i.isalpha(): vérifie si le caractère est une lettre de l'alphabet.

- Pour les lettres majuscules (`if i.isupper():`), elle applique le décalage en utilisant la formule (ord(i) - 65 + decalage) % 26 + 65.

- Pour les lettres minuscules (`elif i.islower():`), elle utilise la formule (ord(i) - 97 + decalage) % 26 + 97 pour le décalage.

- Les caractères non alphabétiques sont conservés tels quels dans le message résultant.

- Le message crypté est renvoyé.

2. Fonction de Décryptage (`decryptage`)

- La fonction de décryptage a une logique similaire à celle du cryptage.

- Elle utilise la formule (ord(i) - 65 - decalage) % 26 + 65 pour décrypter les lettres majuscules.

- Pour les lettres minuscules, elle utilise (ord(i) - 97 - decalage) % 26 + 97 pour le décalage inverse.

- Les caractères non alphabétiques sont également préservés inchangés dans le message résultant.

- Le message décrypté est renvoyé.

Ces fonctions permettent d'appliquer le chiffrement de César, un décalage fixe, aux lettres d'une chaîne de caractères, et de les décrypter en sens inverse.
# Exemples d'Application du Cryptage et Décryptage

# Cryptage
Supposons que l'utilisateur souhaite crypter la chaîne "HELLO" avec un décalage de 3.

1. L'utilisateur choisit de crypter en entrant 1.
2. Il entre la chaîne à crypter : HELLO.
3. Il entre la valeur du décalage : 3.
4. Le programme affiche le message crypté :
     Message chiffré : KHOOR
   
# Décryptage
Si l'utilisateur souhaite maintenant décrypter le message "KHOOR" avec le même décalage de 3.

1. L'utilisateur choisit de décrypter en entrant 2.
2. Il entre la chaîne à décrypter : KHOOR.
3. Il entre la valeur du décalage : 3.
4. Le programme affiche le message décrypté :
     Message déchiffré : HELLO
   
# Exemple Complet d'Exécution
# Chiffrage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 1
Entrez une chaîne de caractères à crypter : HELLO
Entrez la valeur du décalage : 3
Message chiffré : KHOOR

# Déchiffrage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 2
Entrez une chaîne de caractères à déchiffrer : KHOOR
Entrez la valeur du décalage : 3
Message déchiffré : HELLO

Ces exemples illustrent comment l'utilisateur peut interagir avec le programme pour crypter et décrypter des messages en utilisant le chiffrement de César avec un décalage spécifié.

# Polybe
Le chiffrement de Polybe repose sur un carré 5x5 où chaque lettre de l'alphabet (sauf 'J') est associée à une paire de coordonnées ('I' et 'J' possédant les mêmes coordonnées). Le carré est construit à partir d'une lettre de départ (cryptage par lettre) ou d'un mot-clé (cryptage par mot-clé). Pour le cryptage, chaque lettre de la chaîne est remplacée par ses coordonnées dans le carré de Polybe. Le déchiffrement inverse ce processus, retrouvant les lettres d'origine.

# Affine
Le chiffrement affine utilise une transformation mathématique de la forme (ax + b) % 26 sur chaque lettre alphabétique d'une chaîne. Les paramètres 'a' et 'b' sont des entiers. Pour le cryptage, chaque lettre est remplacée par le résultat de cette formule, modulo 26 pour rester dans l'alphabet. Le déchiffrement utilise l'inverse modulaire pour restaurer le message original. L'inverse modulaire de 'a' est calculé comme pow(a, -1, 26).

Ces explications détaillées décrivent les étapes spécifiques effectuées par chaque méthode de cryptage et de décryptage.
