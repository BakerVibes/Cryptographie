### César
### Explication des Fonctions de Cryptage et Décryptage

1. Fonction de Cryptage (`cryptage`)

- La fonction prend deux paramètres en entrée : chaine (la chaîne de caractères à crypter) et decalage (le nombre de positions à décaler chaque lettre).
  
- Elle itère sur chaque caractère de la chaîne fournie.

- La condition if i.isalpha(): vérifie si le caractère est une lettre de l'alphabet.

- Pour les lettres majuscules (`if i.isupper():`), elle applique le décalage en utilisant la formule (ord(i) - 65 + decalage) % 26 + 65.

- Pour les lettres minuscules (`elif i.islower():`), elle utilise la formule (ord(i) - 97 + decalage) % 26 + 97 pour le décalage.

- Les caractères non alphabétiques sont conservés tels quels dans le message résultant.

- Le message crypté est renvoyé.

2. Fonction de Décryptage (`decryptage`)

- La fonction de décryptage a une logique similaire à celle du cryptage.

- Elle utilise la formule (ord(i) - 65 - decalage) % 26 + 65 pour décrypter les lettres majuscules.

- Pour les lettres minuscules, elle utilise (ord(i) - 97 - decalage) % 26 + 97 pour le décalage inverse.

- Les caractères non alphabétiques sont également préservés inchangés dans le message résultant.

- Le message décrypté est renvoyé.

Ces fonctions permettent d'appliquer le chiffrement de César, un décalage fixe, aux lettres d'une chaîne de caractères, et de les décrypter en sens inverse.

## Exemples d'Application du Cryptage et Décryptage
# Cryptage
Supposons que l'utilisateur souhaite crypter la chaîne "HELLO" avec un décalage de 3.
1. L'utilisateur choisit de crypter en entrant 1.
2. Il entre la chaîne à crypter : HELLO.
3. Il entre la valeur du décalage : 3.
4. Le programme affiche le message crypté :
     Message chiffré : KHOOR
   
# Décryptage
Si l'utilisateur souhaite maintenant décrypter le message "KHOOR" avec le même décalage de 3.
1. L'utilisateur choisit de décrypter en entrant 2.
2. Il entre la chaîne à décrypter : KHOOR.
3. Il entre la valeur du décalage : 3.
4. Le programme affiche le message décrypté :
     Message déchiffré : HELLO
   
## Exemple Complet d'Exécution
# Chiffrage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 1
Entrez une chaîne de caractères à crypter : HELLO
Entrez la valeur du décalage : 3
Message chiffré : KHOOR

# Déchiffrage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 2
Entrez une chaîne de caractères à déchiffrer : KHOOR
Entrez la valeur du décalage : 3
Message déchiffré : HELLO

Ces exemples illustrent comment l'utilisateur peut interagir avec le programme pour crypter et décrypter des messages en utilisant le chiffrement de César avec un décalage spécifié.

### Polybe
## Description
Ce code Python propose une implémentation du chiffrement par Carré de Polybe, une technique de cryptage basée sur un carré où chaque lettre est associée à une paire de coordonnées.

## Fonctionnement des Fonctions
1. Fonction de Chiffrement (`cryptage`)

- La fonction prend trois paramètres en entrée : chaine (la chaîne de caractères à crypter), cle (la lettre ou le mot clé utilisé pour créer le carré de Polybe), et choix (1 pour chiffrer à partir d'une lettre, 2 pour chiffrer à partir d'un mot clé).

- Elle crée un carré de Polybe en fonction de la lettre de départ ou du mot clé fourni.

- Pour chaque caractère de la chaîne, elle détermine ses coordonnées dans le carré de Polybe.

- Le caractère chiffré est obtenu en concaténant les coordonnées.

- Le message chiffré est renvoyé.

2. Fonction de Déchiffrement (`decryptage`)

- La fonction de déchiffrement suit une logique similaire à celle du chiffrement.

- Elle divise le code chiffré en paires de coordonnées.

- Pour chaque paire de coordonnées, elle détermine le caractère associé dans le carré de Polybe.

- Le message déchiffré est obtenu en concaténant ces caractères.

- Le message déchiffré est renvoyé.

## Exemple d'Utilisation du Chiffrement par Carré de Polybe
# Chiffrement avec une Lettre de Départ
1. L'utilisateur choisit de chiffrer à partir d'une lettre en entrant 1.
2. Il entre la chaîne à chiffrer, par exemple, "HELLO".
3. Il entre la lettre de départ du carré de Polybe, par exemple, "A".
4. Le programme affiche le message chiffré :
     Message chiffré : 12 25 12 12 15
   
# Chiffrement avec un Mot Clé
1. L'utilisateur choisit de chiffrer à partir d'un mot clé en entrant 2.
2. Il entre la chaîne à chiffrer, par exemple, "HELLO".
3. Il entre le mot clé du carré de Polybe, par exemple, "PYTHON".
4. Le programme affiche le message chiffré :
     Message chiffré : 34 45 34 34 41
   
# Déchiffrement avec une Lettre de Départ
1. L'utilisateur choisit de déchiffrer à partir d'une lettre en entrant 2.
2. Il entre le code à déchiffrer, par exemple, "12 25 12 12 15".
3. Il entre la lettre de départ du carré de Polybe, par exemple, "A".
4. Le programme affiche le message déchiffré :
     Message déchiffré : HELLO
   
# Déchiffrement avec un Mot Clé
1. L'utilisateur choisit de déchiffrer à partir d'un mot clé en entrant 2.
2. Il entre le code à déchiffrer, par exemple, "34 45 34 34 41".
3. Il entre le mot clé du carré de Polybe, par exemple, "PYTHON".
4. Le programme affiche le message déchiffré :
     Message déchiffré : HELLO

Ce script permet à l'utilisateur de choisir entre le chiffrement et le déchiffrement avec une lettre de départ ou un mot clé pour le carré de Polybe. Les fonctions cryptage et decryptage manipulent les coordonnées pour produire le message chiffré ou déchiffré.

### Affine
### Explication des Fonctions de Chiffrement Affine et Déchiffrement Affine

1. Fonction de Chiffrement Affine (`chiffrement_affine`)

- La fonction prend trois paramètres en entrée : chaine (la chaîne de caractères à crypter), a (la première partie de la clé), et b (la deuxième partie de la clé).

- Elle itère sur chaque caractère de la chaîne fournie.

- Pour chaque caractère alphabétique, elle applique la formule (a * ord(i) + b) % 26 pour effectuer la transformation affine.

- Le résultat est converti en lettre majuscule par la formule (résultat % 26) + 65.

- Les caractères non alphabétiques sont conservés tels quels dans le message résultant.

- Le message crypté est renvoyé.

2. Fonction de Déchiffrement Affine (`dechiffrement_affine`)

- La fonction de décryptage suit une logique similaire à celle du cryptage.

- Elle utilise la formule (a_inv * (ord(i) - b)) % 26 pour décrypter chaque caractère alphabétique.

- a_inv est l'inverse modulaire de a par rapport à 26.

- Le résultat est converti en lettre majuscule par la formule (résultat % 26) + 65.

- Les caractères non alphabétiques sont également préservés inchangés dans le message résultant.

- Le message décrypté est renvoyé.

## Processus d'Utilisation

1. L'utilisateur choisit de crypter ou décrypter en entrant 1 ou 2.

2. Il entre la chaîne à traiter, par exemple, "HELLO".

3. Il entre les parties de la clé (`a` et `b`) selon la demande.

4. La fonction correspondante (chiffrement ou déchiffrement) est appelée avec les paramètres fournis.

5. Le résultat (message crypté ou décrypté) est affiché.

Ces fonctions permettent d'appliquer le chiffrement affine, une généralisation du chiffrement de César, aux lettres d'une chaîne de caractères, et de les décrypter en utilisant une clé inverse.

Ces explications détaillées décrivent les étapes spécifiques effectuées par chaque méthode de cryptage et de décryptage.
   
## Exemple Complet d'Exécution
# Cryptage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 1
Entrez une chaîne de caractères à crypter : HELLO
Entrez la valeur du décalage : 3
Message chiffré : KHOOR

# Décalage
Tapez 1 pour chiffrer et 2 pour déchiffrer : 2
Entrez une chaîne de caractères à déchiffrer : KHOOR
Entrez la valeur du décalage : 3
Message déchiffré : HELLO

Ces exemples illustrent comment l'utilisateur peut interagir avec le programme pour crypter et décrypter des messages en utilisant le chiffrement de César avec un décalage spécifié.
